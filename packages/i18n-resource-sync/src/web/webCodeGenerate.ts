import * as fs from 'fs-extra';
import * as path from 'path';
import { cwd } from '../constants';
import { CodeInfo, Config, Package } from '../types';
import { hasOwn } from '../uitls';
import buildScript from '../script';

let codeInfo: CodeInfo = {};
const imoprtCodeInfo = new Set();
function resetWebCodeCollect() {
    codeInfo = {};
    imoprtCodeInfo.clear();
}
function webCodeCollect(packages, params) {
    const namespaceName = (params || {}).namespaceName || 'translation';
    packages.forEach((item: Package) => {
        const { locale } = item;
        const importDeclare = `import ${locale.replace(
            /-/g,
            ''
        )}_${namespaceName} from './${locale}/${namespaceName}.json';`;
        imoprtCodeInfo.add(importDeclare);
        const curCodeInfo = codeInfo[locale] || [];
        curCodeInfo.push({
            importVar: `${locale.replace(/-/g, '')}_${namespaceName}`,
            i18nextNS: namespaceName,
        });
        codeInfo[locale] = curCodeInfo;
    });
}
function webCodeGenerate(params: Config) {
    const { dest = 'src/assets/locales', script, filename = 'resources.ts' } = params;
    const resourcesFile = path.join(cwd, `./${dest}`, filename);
    let importContent = '';
    imoprtCodeInfo.forEach((importDeclare: any) => {
        importContent += `${importDeclare}\n`;
    });
    let bodyArray = [];
    for (let locale in codeInfo) {
        if (hasOwn(codeInfo, locale)) {
            const namespaceContent = codeInfo[locale]
            .map((item) => `        ${item.i18nextNS}: ${item.importVar}`)
            .join(',\n');
            bodyArray.push(`    '${locale}': {\n${namespaceContent}\n    }`);
        }
    }

    let bodyContent: string = bodyArray.join(',\n');

    bodyContent = `const resources = {\n${bodyContent}\n};`;

    const exportContent = 'export default resources;';
    const resourceCode = [
        '// This file was auto generated by resource-sync tools.',
        importContent,
        bodyContent,
        exportContent,
    ].join('\n\n');
    fs.writeFileSync(resourcesFile, resourceCode, 'utf8');
    if (script && script.open) {
        const globalName = script.globalName || 'i18nResources';
        // 生成script 文件
        buildScript({ dest, globalName, filename });
    }
}

export { webCodeCollect, webCodeGenerate, resetWebCodeCollect };
